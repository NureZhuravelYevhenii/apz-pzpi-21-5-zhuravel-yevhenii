РОЗРОБКА MOBILE ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

Мета роботи:
Покращити навички проектування програмних систем. Розробити  mobile частину програмної системи та описати її з допомогою демонстраційного відео, UML Use Case diagram, UML Package diagram, UML Component Diagram, UML State Diagram.

Хід роботи:
Демо ролик проєкту доступний за посиланням (https://youtu.be/49MkLrbWxc0).
Посилання на репозиторій програмної системи: https://github.com/NureZhuravelYevhenii/apz-pzpi-21-5-zhuravel-yevhenii .

1 АРХІТЕКТУРА ТА ІНЖЕНЕРНІ РІШЕННЯ

Mobile частина зроблена з допомогою MAUI, що дозволяє користувачам створювати застосунки для більшості популярних платформ, без написання коду спеціально під конкретну платформу напряму. Для реалізації використовувався шаблон MVVM, який дозволяє створити конкретні компоненти відображення View, які поєднуються з шаром бізнес логіки Model з допомогою середньої ланки ViewModel. Це дозволяє створювати застосунки, що залежать від наданих їм інтерфейсів в ViewModel, що спрощує реалізацію UI. Але я писав ViewModel з нуля, так як інші UI частини системи використовують інші технології.

1.1	ШАР МОБІЛЬНОГО ЗАСТОСУНКУ 

Цей шар використовує фреймворк MAUI для написання коду, який в подальшому компілюється в код специфічний для конкретної платформи. Цей шар складається з View, що написані з допомогою мови розмітки XAML, ViewModel, що реалізують шаблон Prod Cons з допомогою інтерфейсу INotifyPropertyChanged та бібліотеки для полегшення використання цього інтерфейсу CommunityToolkit. Цей шар звертається до шару зв’язку з API.

1.2	ШАР ЗВ’ЯЗКУ З API

Шар забезпечує реалізації методів для з’єднання з API, конкретні методи для створення моделей, авторизації, тощо. Цей шар використовує сутності з конфігураціями, котрі створюються ServiceProvider.

1.4	ЛОКАЛІЗАЦІЯ

Локалізація реалізована з допомогою файлів ресурсів та ResourceManager. Файли ресурсів додаються як частина маніфесту програми, а ResourceManager вибирає файл, який потрібно зчитати судячи з додаткової інформації: MobileResources.en, де en – локалізація.

1.5	ЗАГАЛЬНА ІНФОРМАЦІЯ

Всі сервіси реалізують абстракції, що забезпечує виконання принципу SOLID Dependency Inversion, а також допомагає в реалізації Dependency Injection, що спрощує створення сторінок, а також дає можливість спрощено їх додавати, не змінюючи при цьому написану розмітку основного застосунку.

2	ДІАГРАМА КОМПОНЕНТ

Була створена діаграма компонентів (рис. 1), що показує як пов’язані сторінки сутностей з сервісами, та які елементи керування вони дають.

3	ДІАГРАМА ПРЕЦЕДЕНТІВ

Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (додаток А).
Система має три види користувачів: не зареєстрований користувач, зареєстрований користувач, годівниця.

4	ДІАГРАМА ПАКЕТІВ

Була створена діаграма пакетів mobile частини проєкту (рис. 2). Ця частина проєкту складається з таких пакетів як Mobile (основна функціональність) та Mobile.ApiService. Вся їх функціональність була описана в попередніх розділах, а залежності показані на рисунку 2.

5	ДІАГРАМА СТАНІВ

Була стоврена діаграма станів (рис. 3), для відображення станів, в яких може бути застосунок.

Висновки:
Під час роботи над лабораторною роботою, я розробив  mobile частину програмної системи та описав її з допомогою демонстраційного відео, UML Use Case diagram, UML Package diagram, UML Component Diagram, UML State Diagram.

Додаток А

Діаграма прецедентів

Додаток Б

Сторінка Animal Center (View)

1	<?xml version="1.0" encoding="utf-8" ?>
2	<ContentPage x:Class="VetAutoMobile.Pages.AnimalCentersPage"
3	             xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
4	             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
5	             xmlns:models="clr-namespace:VetAutoMobile.Entities.AnimalCenters;assembly=VetAutoMobile.Entities"
6	             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
7	             xmlns:viewModels="clr-namespace:VetAutoMobile.ViewModels.PageViewModels"
8	             Title="AnimalCentersPage"
9	             x:DataType="viewModels:AnimalCenterViewModel">
10	
11	    <ContentPage.Behaviors>
12	        <toolkit:EventToCommandBehavior Command="{Binding Loaded}"
13	                                        EventName="Appearing" />
14	    </ContentPage.Behaviors>
15	
16	    <StackLayout>
17	        <StackLayout IsVisible="{Binding IsCurrentEntitySet}">
18	            <Label FontAttributes="Bold"
19	                   FontSize="Large"
20	                   Text="Animal Center Details" />
21	
22	            <StackLayout>
23	                <Label Text="Name:" />
24	                <Entry Text="{Binding CurrentEntity.Name}" />
25	            </StackLayout>
26	
27	            <StackLayout>
28	                <Label Text="Address:" />
29	                <Entry Text="{Binding CurrentEntity.Address}" />
30	            </StackLayout>
31	
32	            <StackLayout>
33	                <Label Text="Info:" />
34	                <Entry Text="{Binding CurrentEntity.Info}" />
35	            </StackLayout>
36	
37	            <Button Command="{Binding Update}"
38	                    Text="Update" />
39	            <Button Command="{Binding BackToList}"
40	                    Text="Back to list" />
41	        </StackLayout>
42	        <StackLayout IsVisible="{Binding IsCurrentEntityNotSet}">
43	            <Label>Animal centers:</Label>
44	            <ListView ItemsSource="{Binding Entities}"
45	                      SelectionMode="Single">
46	                <ListView.Behaviors>
47	                    <toolkit:EventToCommandBehavior Command="{Binding GetEntity}"
48	                                                    x:TypeArguments="SelectedItemChangedEventArgs"
49	                                                    EventName="ItemSelected" />
50	                </ListView.Behaviors>
51	                <ListView.ItemTemplate>
52	                    <DataTemplate x:DataType="models:AnimalCenter">
53	                        <ViewCell>
54	                            <StackLayout>
55	                                <Label Text="Name:" />
56	                                <Label Text="{Binding Name}" />
57	                            </StackLayout>
58	                        </ViewCell>
59	                    </DataTemplate>
60	                </ListView.ItemTemplate>
61	            </ListView>
62	        </StackLayout>
63	    </StackLayout>
64	</ContentPage>

Додаток В

View Model для роботи з сутностями

1	using AutoMapper;
2	using CommunityToolkit.Mvvm.ComponentModel;
3	using CommunityToolkit.Mvvm.Input;
4	using System.Windows.Input;
5	using VetAutoMobile.ApiLayer.Abstractions;
6	using VetAutoMobile.ViewModels.BaseViewModels;
7	
8	namespace VetAutoMobile.ViewModels
9	{
10	    public partial class EntityBaseViewModel<T, TId, TCreation, TUpdate> : BaseViewModel
11	        where T : class
12	        where TCreation : new()
13	    {
14	        protected readonly IEntityApiService<T, TId, TCreation, TUpdate> _apiService;
15	        protected readonly IMapper _mapper;
16	        [ObservableProperty]
17	        private T? _currentEntity;
18	        [ObservableProperty]
19	        private TCreation? _newEntity = new TCreation();
20	        [ObservableProperty]
21	        private bool _isCreating = false;
22	        [ObservableProperty]
23	        private IEnumerable<T> _entities = new List<T>();
24	
25	        public ICommand Loaded { get; set; }
26	        public ICommand GetEntities { get; set; }
27	        public ICommand GetEntity { get; set; }
28	        public ICommand Update { get; set; }
29	        public ICommand Create { get; set; }
30	        public ICommand ToCreate { get; set; }
31	        public ICommand BackToList { get; set; }
32	
33	        public bool IsCurrentEntitySet => !IsCreating && CurrentEntity is not null;
34	        public bool IsCurrentEntityNotSet => !IsCreating && CurrentEntity is null;
35	
36	        public EntityBaseViewModel(IEntityApiService<T, TId, TCreation, TUpdate> apiService, IMapper mapper)
37	        {
38	            _apiService = apiService;
39	            _mapper = mapper;
40	
41	            Loaded = new AsyncRelayCommand(LoadAsync);
42	            GetEntities = new AsyncRelayCommand(GetEntitiesAsync);
43	            GetEntity = new AsyncRelayCommand<SelectedItemChangedEventArgs>(GetCurrentEntityAsync);
44	            Update = new AsyncRelayCommand(UpdateAsync);
45	            Create = new AsyncRelayCommand(CreateAsync);
46	            ToCreate = new RelayCommand(ToCreatePage);
47	            BackToList = new AsyncRelayCommand(BackToListAsync);
48	        }
49	
50	        partial void OnCurrentEntityChanged(T? oldValue, T? newValue)
51	        {
52	            OnPropertyChanged(nameof(IsCurrentEntitySet));
53	            OnPropertyChanged(nameof(IsCurrentEntityNotSet));
54	        }
55	
56	        partial void OnIsCreatingChanged(bool oldValue, bool newValue)
57	        {
58	            OnPropertyChanged(nameof(IsCurrentEntitySet));
59	            OnPropertyChanged(nameof(IsCurrentEntityNotSet));
60	        }
61	
62	        private async Task GetEntitiesAsync()
63	        {
64	            Entities = await _apiService.GetAllAsync(); 
65	        }
66	
67	        protected virtual async Task GetCurrentEntityAsync(SelectedItemChangedEventArgs? args)
68	        {
69	            var entity = args?.SelectedItem as T;
70	
71	            if (entity is null)
72	            {
73	                return;
74	            }
75	
76	            CurrentEntity = await _apiService.GetByIdAsync(_mapper.Map<TId>(entity));
77	        }
78	
79	        protected virtual Task LoadAsync()
80	        {
81	            return GetEntitiesAsync();
82	        }
83	
84	        protected virtual Task UpdateAsync()
85	        {
86	            return _apiService.UpdateAsync(_mapper.Map<TUpdate>(CurrentEntity));
87	        }
88	
89	        protected virtual async Task CreateAsync()
90	        {
91	            await _apiService.CreateAsync(NewEntity!); 
92	            await GetEntitiesAsync();
93	            IsCreating = false;
94	        }
95	
96	        private void ToCreatePage()
97	        {
98	            NewEntity = new TCreation();
99	            IsCreating = true;
100	        }
101	
102	        private Task BackToListAsync()
103	        {
104	            CurrentEntity = null;
105	            return GetEntitiesAsync();
106	        }
107	    }
108	}

Додаток Г

AppShell (демонстрація роботи Guards)

1	using VetAutoMobile.Abstractions.Pages;
2	using VetAutoMobile.Entities.Guards;
3	using VetAutoMobile.ViewModels.AppViewModels;
4	
5	namespace VetAutoMobile
6	{
7	    public partial class AppShell : Shell
8	    {
9	        public AppShell(IEnumerable<IEntityWithGuards> pages, AppShellViewModel viewModel)
10	        {
11	            InitializeComponent();
12	
13	            BindingContext = viewModel;
14	
15	            Items.Clear();
16	
17	            foreach (var page in pages)
18	            {
19	                HandleGuards(page);
20	            }
21	        }
22	
23	        private void HandleGuards(IEntityWithGuards page)
24	        {
25	            var pageAsContentPage = page as ContentPage;
26	            if (pageAsContentPage is null)
27	            {
28	                return;
29	            }
30	
31	            var flyoutItem = new FlyoutItem();
32	
33	            flyoutItem.Items.Add(pageAsContentPage);
34	            flyoutItem.Title = pageAsContentPage.Title;
35	
36	            if (page.Guards.Contains(Guard.LoginRequired))
37	            {
38	                flyoutItem.SetBinding(FlyoutItem.IsVisibleProperty, nameof(AppShellViewModel.IsLoggedIn));
39	            }
40	            if (page.Guards.Contains(Guard.OnlyIfLogout))
41	            {
42	                flyoutItem.SetBinding(FlyoutItem.IsVisibleProperty, nameof(AppShellViewModel.IsLoggedOut));
43	            }
44	
45	            Items.Add(flyoutItem);
46	        }
47	    }
48	}

Додаток Д

Сервіс конфігурації

1	using Microsoft.Extensions.Options;
2	using Newtonsoft.Json;
3	using System.Net;
4	using System.Net.Sockets;
5	using System.Text;
6	using VetAutoMobile.ApiLayer.Abstractions;
7	using VetAutoMobile.ApiLayer.Entities;
8	using VetAutoMobile.ApiLayer.Entities.AuthorizationConfigurations;
9	using VetAutoMobile.ApiLayer.Entities.EndpointConfigurations;
10	using VetAutoMobile.ApiLayer.Entities.EndpointConfigurations.EntityEndpointConfigurations;
11	using VetAutoMobile.ApiLayer.Entities.HttpClientConfigurations;
12	
13	namespace VetAutoMobile.ApiLayer
14	{
15	    public class ConfigurationService : IConfigurationService
16	    {
17	        private readonly DeviceConfiguration _deviceConfiguration;
18	        private readonly HttpClientConfiguration _httpClientConfiguration;
19	        private readonly AuthorizationConfiguration _authorizationConfiguration;
20	        private FeederEndpointConfiguration _feederEndpointConfiguration;
21	
22	        public ConfigurationService(
23	            IOptions<DeviceConfiguration> deviceConfigurationOptions, 
24	            IOptions<HttpClientConfiguration> httpClientConfigurationOptions,
25	            IOptions<FeederEndpointConfiguration> feederEndpointConfigurationOptions,
26	            AuthorizationConfiguration authorizationConfiguration)
27	        {
28	            _deviceConfiguration = deviceConfigurationOptions.Value ?? throw new ArgumentNullException(nameof(deviceConfigurationOptions));
29	            _httpClientConfiguration = httpClientConfigurationOptions.Value ?? throw new ArgumentNullException(nameof(httpClientConfigurationOptions));
30	            _feederEndpointConfiguration = feederEndpointConfigurationOptions.Value ?? throw new ArgumentNullException(nameof(feederEndpointConfigurationOptions));
31	            _authorizationConfiguration = authorizationConfiguration;
32	        }
33	        public Task ConfigureDevicesAsync()
34	        {
35	            return Task.Run(() =>
36	            {
37	                var thread = new Thread(SendConfiguration);
38	                thread.Start();
39	                thread.Join();
40	            });
41	        }
42	
43	        private void SendConfiguration()
44	        {
45	            var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
46	            socket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Broadcast, true);
47	
48	            socket.SendTo(Encoding.UTF8.GetBytes(GetConfigurationString()), new IPEndPoint(
49	
50	#if DEBUG
51	                IPAddress.Parse("10.0.2.2"),
52	#else
53	                IPAddress.Broadcast,
54	#endif
55	
56	                _deviceConfiguration.Port));
57	        }
58	
59	        private string GetConfigurationString() =>
60	            JsonConvert.SerializeObject(
61	                new DeviceEndpointConfiguration
62	                {
63	                    AccessToken = _authorizationConfiguration.AccessToken!,
64	                    AnimalFeederEndpoint = _feederEndpointConfiguration.CreateAnimalFeeder,
65	                    BaseUrl = _httpClientConfiguration.BaseUrl,
66	                    FeederByCoordinatesEndpoint = _feederEndpointConfiguration.GetByCoordinates,
67	                    FeederEndpoint = _feederEndpointConfiguration.CreateEndpoint
68	                }
69	            ) + "<EOM>";
70	    }
71	}
