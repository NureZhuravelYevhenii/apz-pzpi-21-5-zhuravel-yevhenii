РОЗРОБКА FRONT-END ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

Мета роботи:
Покращити навички проектування програмних систем. Розробити front-end частину програмної системи та описати її з допомогою демонстраційного відеоролику, UML Use Case Diagram, UML Component Diagram, UML State Diagram та UML Package Diagram.

Хід роботи:
Демо ролик проєкту доступний за посиланням (https://youtu.be/FSA4KRObn5w).
Посилання на репозиторій програмної системи: https://github.com/NureZhuravelYevhenii/apz-pzpi-21-5-zhuravel-yevhenii .

1 АРХІТЕКТУРА ТА ІНЖЕНЕРНІ РІШЕННЯ

Front-end частина програмної системи реалізована з допомогою бібліотеки React та будівельника Vite. Ця частина складається з основних файлів, потрібних для роботи будівельника та сторінок, розділених по папкам, наприклад views, entity-pages, тощо, що реалізовані з допомогою функціональних компонентів бібліотеки React. Ці компоненти об’єднуються з допомогою react-router -dom, для підтримки переходу між сторінками.

1.1	СТОРІНКИ СПИСКІВ 

Ці сторінки використовуються для відображення конкретних сутностей. Вони зроблені по базовому формату: виклик useEffect для отримання даних, зберігання цих даних в масив та відображення їх з допомогою методу map в елементи html. Також присутні кнопки для повернення, створення та зміни елементів. В деяких сутностях є можливість перейти на сторінку деталей. 

1.2	СТОРІНКИ ДЕТАЛЕЙ СУТНОСТЕЙ

Сторінки для відображеня деталей про сутності, наприклад в feeder details відображаються найпопулярніші дні тижня, місяця та сезони, а також показується розташування з допомогою бібліотеки роботи з картами. Для animal details відображається статистика по з’їденій їжі, а також, отримавши останні місця годування, відображає їх на карті, відсортувавши по даті.

1.3	ШАР З’ЄДНАННЯ З API

Шар, що містить створений та налаштований об’єкт axios, що додається бібліотекою axios, в якому реєструється interceptor для додавання токену доступу до кожного запиту, якщо користувач ввійшов (токен присутній в localstorage).

1.4	ЛОКАЛІЗАЦІЯ

Локалізація реалізована з допомогою бібліотеки i18n та файлів локалізацій. Присутні українська та англійська локалізації.

2	ДІАГРАМА КОМПОНЕНТ

Була створена діаграма компонентів (рис. 1), що показує як пов’язані сторінки сутностей з сервісами, та які елементи керування вони дають.

3	ДІАГРАМА ПРЕЦЕДЕНТІВ

Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (додаток А).
Система має три види користувачів: не зареєстрований користувач, зареєстрований користувач, годівниця.

4	ДІАГРАМА ПАКЕТІВ

Була створена діаграма пакетів front-end частини проєкту (рис. 2). Ця частина проєкту складається з таких пакетів як Components, Locales, EntityPages, froms, Views. Вся їх функціональність була описана в попередніх розділах, а залежності показані на рисунку 2.

5	ДІАГРАМА СТАНІВ

Була стоврена діаграма станів (рис. 3), для відображення станів, в яких може бути застосунок.

Висновки:
Під час виконання лабораторної роботи, я покращив навички проектування програмних систем, та розробив front-end частину програмної системи, описавши її з допомогою демонстраційного відеоролику, UML Use Case Diagram, UML Component Diagram, UML State Diagram та UML Package Diagram.

Додаток А

Діаграма прецедентів

Додаток Б

Сторінка створення Animal Center

1	import React, { useState } from "react";
2	import axiosInstance from "../axios-instance";
3	import { useNavigate } from "react-router-dom";
4	import { useTranslation } from "react-i18next";
5	
6	interface AnimalCenterCreationFormData {
7	  name: string;
8	  password: string;
9	  address: string;
10	  info: string;
11	}
12	
13	const AnimalCenterCreationForm: React.FC = () => {
14	  const [formData, setFormData] = useState<AnimalCenterCreationFormData>({
15	    name: "",
16	    password: "",
17	    address: "",
18	    info: "",
19	  });
20	  const navigate = useNavigate();
21	  const { t } = useTranslation();
22	
23	  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
24	    const { name, value } = e.target;
25	    setFormData({ ...formData, [name]: value });
26	  };
27	
28	  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
29	    e.preventDefault();
30	    try {
31	      await axiosInstance
32	        .post("/api/animalCenter", formData)
33	        .then(() => navigate("/animal-centers"));
34	      // Handle successful form submission
35	    } catch (error) {
36	      // Handle error
37	    }
38	  };
39	
40	  return (
41	    <form onSubmit={handleSubmit}>
42	      <input
43	        type="text"
44	        name="name"
45	        value={formData.name}
46	        onChange={handleChange}
47	        placeholder={t("Name")}
48	      />
49	      <input
50	        type="password"
51	        name="password"
52	        value={formData.password}
53	        onChange={handleChange}
54	        placeholder={t("Password")}
55	      />
56	      <input
57	        type="text"
58	        name="address"
59	        value={formData.address}
60	        onChange={handleChange}
61	        placeholder={t("Address")}
62	      />
63	      <input
64	        type="text"
65	        name="info"
66	        value={formData.info}
67	        onChange={handleChange}
68	        placeholder={t("Info")}
69	      />
70	      <button type="submit">{t("Submit")}</button>
71	    </form>
72	  );
73	};
74	
75	export default AnimalCenterCreationForm;

Додаток В

Сторінка деталей про тварину

1	import React, { useState, useEffect } from "react";
2	import { useParams } from "react-router-dom";
3	import axiosInstance from "../axios-instance";
4	import { MapContainer, Marker, Polyline, TileLayer } from "react-leaflet";
5	import { LatLngTuple } from "leaflet";
6	import "./css/Map.css";
7	import { useTranslation } from "react-i18next";
8	
9	interface Animal {
10	  id: string;
11	  name: string;
12	  typeId: string;
13	  animalCenterId: string;
14	}
15	
16	interface FeedingPlace {
17	  feedingDate: Date;
18	  coordinates: LatLngTuple;
19	}
20	
21	const AnimalPage: React.FC = () => {
22	  const { id } = useParams<{ id: string }>();
23	  const [animal, setAnimal] = useState<Animal | null>(null);
24	  const [feedingPlaces, setFeedingPlaces] = useState<FeedingPlace[]>([]);
25	  const [averageEatenFood, setAverageEatenFood] = useState<number>(0);
26	  const [noEat, setNoEat] = useState<Date>(new Date(0));
27	  const { t } = useTranslation();
28	
29	  useEffect(() => {
30	    axiosInstance
31	      .get<Animal>(`api/animals/single?Id=${id}`)
32	      .then((response) => setAnimal(response.data))
33	      .catch((error) => console.error("Error fetching animal:", error));
34	
35	    axiosInstance
36	      .get<FeedingPlace[]>(`api/animals/feeding-places/${id}`)
37	      .then((response) => setFeedingPlaces(response.data))
38	      .catch((error) => console.error("Error fetching animal:", error));
39	
40	    axiosInstance
41	      .get<number>(`api/animals/average-eaten-food/${id}`)
42	      .then((response) => setAverageEatenFood(response.data))
43	      .catch((error) => console.error("Error fetching animal:", error));
44	
45	    axiosInstance
46	      .get<Date>(`api/animals/no-eat/${id}`)
47	      .then((response) => setNoEat(response.data))
48	      .catch((error) => console.error("Error fetching animal:", error));
49	  }, [id]);
50	
51	  if (!animal) {
52	    return <div>{t("Loading...")}</div>;
53	  }
54	
55	  return (
56	    <div>
57	      <h2>{t("Animal Details")}</h2>
58	      <p>
59	        {t("ID")}: {animal.id}
60	      </p>
61	      <p>
62	        {t("Name")}: {animal.name}
63	      </p>
64	      <p>
65	        {t("Type ID")}: {animal.typeId}
66	      </p>
67	      <p>
68	        {t("Animal Center ID")}: {animal.animalCenterId}
69	      </p>
70	      <p>
71	        {t("Average eaten food")}: {averageEatenFood}
72	      </p>
73	      <p>
74	        {t("No eat period")}: {noEat.toString()}
75	      </p>
76	      {feedingPlaces.length ? (
77	        <MapContainer
78	          center={feedingPlaces[0].coordinates}
79	          zoom={13}
80	          scrollWheelZoom={false}
81	        >
82	          <TileLayer
83	            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
84	            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
85	          />
86	          {feedingPlaces.map(
87	            (v, i, arr) =>
88	              i && (
89	                <Polyline
90	                  positions={[v.coordinates, arr[i - 1].coordinates]}
91	                  color="red"
92	                />
93	              )
94	          )}
95	          {feedingPlaces.map((v) => (
96	            <Marker position={v.coordinates} />
97	          ))}
98	        </MapContainer>
99	      ) : (
100	        <p>{t("There is no feeding places to show(")}</p>
101	      )}
102	    </div>
103	  );
104	};
105	
106	export default AnimalPage;

Додаток Г

Файл запуску

1	import React from "react";
2	import ReactDOM from "react-dom/client";
3	import App from "./App.tsx";
4	import { RouterProvider, createBrowserRouter } from "react-router-dom";
5	import AnimalsView from "./views/AnimalView.tsx";
6	import AnimalCenterView from "./views/AnimalCenterView.tsx";
7	import AnimalCenterUpdateForm from "./forms/AnimalCenterUpdateForm.tsx";
8	import AnimalCenterCreationForm from "./forms/AnimalCenterCreationForm.tsx";
9	import AnimalUpdateForm from "./forms/AnimalUpdateForm.tsx";
10	import AnimalCreationForm from "./forms/AnimalCreationForm.tsx";
11	import SensorTypeView from "./views/SensorTypeView.tsx";
12	import SensorTypeUpdateForm from "./forms/SensorTypeUpdateForm.tsx";
13	import SensorTypeCreationForm from "./forms/SensorTypeCreationForm.tsx";
14	import SensorView from "./views/SensorView.tsx";
15	import SensorUpdateForm from "./forms/SensorUpdateForm.tsx";
16	import SensorCreationForm from "./forms/SensorCreationForm.tsx";
17	import FeederView from "./views/FeederView.tsx";
18	import FeederUpdateForm from "./forms/FeederUpdateForm.tsx";
19	import FeederCreationForm from "./forms/FeederCreationForm.tsx";
20	import AnimalTypeView from "./views/AnimalTypeView.tsx";
21	import AnimalTypeUpdateForm from "./forms/AnimalTypeUpdateForm.tsx";
22	import AnimalTypeCreationForm from "./forms/AnimalTypeCreationForm.tsx";
23	import AnimalFeederView from "./views/AnimalFeederView.tsx";
24	import AnimalFeederCreationForm from "./forms/AnimalFeederCreationForm.tsx";
25	import AnimalFeederUpdateForm from "./forms/AnimalFeederUpdateForm.tsx";
26	import LoginForm from "./forms/LoginForm.tsx";
27	import RegistrationForm from "./forms/RegistrationForm.tsx";
28	import AnimalPage from "./entity-pages/AnimalPage.tsx";
29	import "./i18n";
30	import AppPage from "./entity-pages/AppPage.tsx";
31	import FeederPage from "./entity-pages/FeederPage.tsx";
32	
33	const router = createBrowserRouter([
34	  {
35	    path: "/",
36	    element: <App />,
37	    children: [
38	      {
39	        path: "",
40	        element: <AppPage />,
41	      },
42	      {
43	        path: "animals/create",
44	        element: <AnimalCreationForm />,
45	      },
46	      {
47	        path: "animals/update/:animalId",
48	        element: <AnimalUpdateForm />,
49	      },
50	      {
51	        path: "animals",
52	        element: <AnimalsView />,
53	      },
54	      {
55	        path: "animals/:id",
56	        element: <AnimalPage />,
57	      },
58	      {
59	        path: "animal-centers/create",
60	        element: <AnimalCenterCreationForm />,
61	      },
62	      {
63	        path: "animal-centers/update/:animalCenterId",
64	        element: <AnimalCenterUpdateForm />,
65	      },
66	      {
67	        path: "animal-centers",
68	        element: <AnimalCenterView />,
69	      },
70	      {
71	        path: "animal-feeders/create",
72	        element: <AnimalFeederCreationForm />,
73	      },
74	      {
75	        path: "animal-feeders/update/:animalFeederid",
76	        element: <AnimalFeederUpdateForm />,
77	      },
78	      {
79	        path: "animal-feeders",
80	        element: <AnimalFeederView />,
81	      },
82	      {
83	        path: "animal-types/create",
84	        element: <AnimalTypeCreationForm />,
85	      },
86	      {
87	        path: "animal-types/update/:animalTypeid",
88	        element: <AnimalTypeUpdateForm />,
89	      },
90	      {
91	        path: "animal-types",
92	        element: <AnimalTypeView />,
93	      },
94	      {
95	        path: "feeders/create",
96	        element: <FeederCreationForm />,
97	      },
98	      {
99	        path: "feeders/update/:feederId",
100	        element: <FeederUpdateForm />,
101	      },
102	      {
103	        path: "feeders",
104	        element: <FeederView />,
105	      },
106	      {
107	        path: "feeders/:id",
108	        element: <FeederPage />,
109	      },
110	      {
111	        path: "sensors/create",
112	        element: <SensorCreationForm />,
113	      },
114	      {
115	        path: "sensors/update/:sensorId",
116	        element: <SensorUpdateForm />,
117	      },
118	      {
119	        path: "sensors",
120	        element: <SensorView />,
121	      },
122	      {
123	        path: "sensor-types/create",
124	        element: <SensorTypeCreationForm />,
125	      },
126	      {
127	        path: "sensor-types/update/:sensorTypeId",
128	        element: <SensorTypeUpdateForm />,
129	      },
130	      {
131	        path: "sensor-types",
132	        element: <SensorTypeView />,
133	      },
134	      {
135	        path: "login",
136	        element: <LoginForm />,
137	      },
138	      {
139	        path: "register",
140	        element: <RegistrationForm />,
141	      },
142	    ],
143	  },
144	]);
145	
146	ReactDOM.createRoot(document.getElementById("root")!).render(
147	  <React.StrictMode>
148	    <RouterProvider router={router} />
149	  </React.StrictMode>
150	);
