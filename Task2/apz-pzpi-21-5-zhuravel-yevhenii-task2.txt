Серверна частина системи - це моноліт з No-sql базою даних MongoDb. Моноліт складається з трьох шарів: ui шар, що становить собою сервер обробки HTTP запитів, шар бізнес логіки, в якому знаходяться сервіси для вторинної обробки запитів та шар доступу до даних, що з допомогою зв'язування з базою даних дає можливість керувати даними.

Шар обробки запитів:
Написаний з допомогою технології ASP.NET Core, включає в себе контролери для обробки запитів пов'язаних з сутностями та з допомогою Chain of Responsibility реєструються методи, наприклад, для обробки помилок. Також в цьому шарі реєструються сервіси для Dependency Injection, для створення об'єктів класів ефективно. Є реєстрація пакетів локалізацій, що знаходяться в загальному шарі Core, що дає можливість доступу до нього з усіх шарів моноліту з уникненням циклічних залежностей.

Шар бізнес логіки:
Шар, що має в собі сервіси для обробки запитів по управлінню та отриманню сутностей. Більшість функціональності по управлінню сутностями описано в класі BaseCrudService, для уникнення дублювання коду, а для того, щоб програма відповідала принципу Solid Open-closed, методи, що можуть мати іншу реалізацію в класах наслідниках BaseCrudService, є віртуальними, для їх перевантаження. Для того, щоб користувач мав доступ лише до конкретних полей реальних сутностей бази даних, використовується мапер сутностей AutoMapper. Вся конфігурація для маппінгу описана в папці AutoMapper.

Шар доступу до даних:
Шар, що містить реалізацію патерну repository для драйверу MongoDb для .NET платформи, що інкапсулюють логіку управління та читання даних з MongoDb бази даних. Як і в попередньому шарі, більшість логіки описана в загальному класі BaseRepository, який використовує альтернативну версію декоратора сутностей у вигляді атрибутів, конкретно CollectionName, що дає можливість вказати назву колекції, до якої відноситься сутність, що забезпечує правильну роботу при використанні більшості сутностей.

Шар загальної функціональності:
Шар, що містить загальну функціональність, що може бути використана будь яким шаром. До неї відносяться загальні enum (Season, Month), кофнігурації, константи, локалізації, сервіси, що можуть бути використані в будь якому шарі (сервіс часу) та класи управління засобами метапрограмування платформи .NET Expression. З допомогою цих класів генеруються функції для керування станом сутностей, або отримання лямбда виразів для, наприклад, предикату пошуку сутності по ідентифікатору. Так як ці функції генеруються під час виконання програми, а також генеруються лише один раз, вони дозволяють не писати подібні функції вручну, що дозволяє уникнути великої кількості коду, що повторюється. Також в шарі доступу до даних, в реалізаціях патерну repository для конкретних сутностей, створені методи для агрегацій даних з бази даних, що дає можливість уникнути обробки великої кількості даних на стороні сервера, роблячи конкретні запити до бази даних. Наприклад так в AnimalFeederRepostory розраховуються найпопулярніші годівниці з допомогою групування записів по ідентифікатору годівниці та сортування результатів по спаданню кількості запитів. Подібні методи реалізовані і для AnimalRepository, AnimalTypeRepository, тощо.

Локалізація реалізована з допомогою реалізації інтерфейсу IStringLocalizer в бібілотеці Microsoft.AspNetCore.Localization. Він реєструється в файлі Program.cs з допомогою методу розширення AddLocalization, та бере .resx файли ресурсів, що знаходяться в шарі загальної функціональності.

Для більшості шарів створені бібліотеки інтерфейсів, що дають можливість відповідати принципу Solid Dependency Inversion, та залежати лише від абстракції, при цьому з можливістю заміни реалізації з допомогою налаштування стандартного контейнеру залежностей ASP.NET, чи контейнера бібліотеки AutoFac, що допомагає реєструвати сервіси ефективніше.